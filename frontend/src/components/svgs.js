

const attrs_to_str = attrs => {
    return Object.keys(attrs).map(key => {
        return `${key}="${attrs[key].replaceAll('"', "&quot;")}"`;
    }).reduce((p, c) => p + " " + c)
}

const pen = (attrs) => {
    attrs = {
        fill: 'none',
        ...attrs
    }
    return /*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path d="M20.8487 8.71306C22.3844 7.17735 22.3844 4.68748 20.8487 3.15178C19.313 1.61607 16.8231 1.61607 15.2874 3.15178L14.4004 4.03882C14.4125 4.0755 14.4251 4.11268 14.4382 4.15035C14.7633 5.0875 15.3768 6.31601 16.5308 7.47002C17.6848 8.62403 18.9133 9.23749 19.8505 9.56262C19.888 9.57563 19.925 9.58817 19.9615 9.60026L20.8487 8.71306Z" fill="var(--accent-color)"/>
            <path d="M14.4386 4L14.4004 4.03819C14.4125 4.07487 14.4251 4.11206 14.4382 4.14973C14.7633 5.08687 15.3768 6.31538 16.5308 7.4694C17.6848 8.62341 18.9133 9.23686 19.8505 9.56199C19.8876 9.57489 19.9243 9.58733 19.9606 9.59933L11.4001 18.1598C10.823 18.7369 10.5343 19.0255 10.2162 19.2737C9.84082 19.5665 9.43469 19.8175 9.00498 20.0223C8.6407 20.1959 8.25351 20.3249 7.47918 20.583L3.39584 21.9442C3.01478 22.0712 2.59466 21.972 2.31063 21.688C2.0266 21.4039 1.92743 20.9838 2.05445 20.6028L3.41556 16.5194C3.67368 15.7451 3.80273 15.3579 3.97634 14.9936C4.18114 14.5639 4.43213 14.1578 4.7249 13.7824C4.97307 13.4643 5.26165 13.1757 5.83874 12.5986L14.4386 4Z" fill="white"/>
        </svg>
    `
}

const chevron_down = (attrs) => {
    attrs = {
        fill: 'none',
        ...attrs
    }
    return /*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path d="M6 9L12 15L18 9" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
    `
}
const chevron_up = (attrs) => {
    attrs = {
        fill: 'none',
        ...attrs
    }
    return /*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path d="M6 15L12 9L18 15" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
    `
}

const password_eye = (attrs) => {
    attrs = {
        fill: 'none',
        width: '1.5rem',
        'stroke-width': '1.5',
        ...attrs
    }
    return /*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path class="opened" d="M3.27489 15.2957C2.42496 14.1915 2 13.6394 2 12C2 10.3606 2.42496 9.80853 3.27489 8.70433C4.97196 6.49956 7.81811 4 12 4C16.1819 4 19.028 6.49956 20.7251 8.70433C21.575 9.80853 22 10.3606 22 12C22 13.6394 21.575 14.1915 20.7251 15.2957C19.028 17.5004 16.1819 20 12 20C7.81811 20 4.97196 17.5004 3.27489 15.2957Z" stroke="black"/>
            <path class="opened" d="M15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12Z" stroke="black"></path>
            <path class='closed' d="M2.68936 6.70456C2.52619 6.32384 2.08528 6.14747 1.70456 6.31064C1.32384 6.47381 1.14747 6.91472 1.31064 7.29544L2.68936 6.70456ZM15.5872 13.3287L15.3125 12.6308L15.5872 13.3287ZM9.04145 13.7377C9.26736 13.3906 9.16904 12.926 8.82185 12.7001C8.47466 12.4742 8.01008 12.5725 7.78417 12.9197L9.04145 13.7377ZM6.37136 15.091C6.14545 15.4381 6.24377 15.9027 6.59096 16.1286C6.93815 16.3545 7.40273 16.2562 7.62864 15.909L6.37136 15.091ZM22.6894 7.29544C22.8525 6.91472 22.6762 6.47381 22.2954 6.31064C21.9147 6.14747 21.4738 6.32384 21.3106 6.70456L22.6894 7.29544ZM19 11.1288L18.4867 10.582V10.582L19 11.1288ZM19.9697 13.1592C20.2626 13.4521 20.7374 13.4521 21.0303 13.1592C21.3232 12.8663 21.3232 12.3914 21.0303 12.0985L19.9697 13.1592ZM11.25 16.5C11.25 16.9142 11.5858 17.25 12 17.25C12.4142 17.25 12.75 16.9142 12.75 16.5H11.25ZM16.3714 15.909C16.5973 16.2562 17.0619 16.3545 17.409 16.1286C17.7562 15.9027 17.8545 15.4381 17.6286 15.091L16.3714 15.909ZM5.53033 11.6592C5.82322 11.3663 5.82322 10.8914 5.53033 10.5985C5.23744 10.3056 4.76256 10.3056 4.46967 10.5985L5.53033 11.6592ZM2.96967 12.0985C2.67678 12.3914 2.67678 12.8663 2.96967 13.1592C3.26256 13.4521 3.73744 13.4521 4.03033 13.1592L2.96967 12.0985ZM12 13.25C8.77611 13.25 6.46133 11.6446 4.9246 9.98966C4.15645 9.16243 3.59325 8.33284 3.22259 7.71014C3.03769 7.3995 2.90187 7.14232 2.8134 6.96537C2.76919 6.87696 2.73689 6.80875 2.71627 6.76411C2.70597 6.7418 2.69859 6.7254 2.69411 6.71533C2.69187 6.7103 2.69036 6.70684 2.68957 6.70503C2.68917 6.70413 2.68896 6.70363 2.68892 6.70355C2.68891 6.70351 2.68893 6.70357 2.68901 6.70374C2.68904 6.70382 2.68913 6.70403 2.68915 6.70407C2.68925 6.7043 2.68936 6.70456 2 7C1.31064 7.29544 1.31077 7.29575 1.31092 7.29609C1.31098 7.29624 1.31114 7.2966 1.31127 7.2969C1.31152 7.29749 1.31183 7.2982 1.31218 7.299C1.31287 7.30062 1.31376 7.30266 1.31483 7.30512C1.31698 7.31003 1.31988 7.31662 1.32353 7.32483C1.33083 7.34125 1.34115 7.36415 1.35453 7.39311C1.38127 7.45102 1.42026 7.5332 1.47176 7.63619C1.57469 7.84206 1.72794 8.13175 1.93366 8.47736C2.34425 9.16716 2.96855 10.0876 3.8254 11.0103C5.53867 12.8554 8.22389 14.75 12 14.75V13.25ZM15.3125 12.6308C14.3421 13.0128 13.2417 13.25 12 13.25V14.75C13.4382 14.75 14.7246 14.4742 15.8619 14.0266L15.3125 12.6308ZM7.78417 12.9197L6.37136 15.091L7.62864 15.909L9.04145 13.7377L7.78417 12.9197ZM22 7C21.3106 6.70456 21.3107 6.70441 21.3108 6.70427C21.3108 6.70423 21.3108 6.7041 21.3109 6.70402C21.3109 6.70388 21.311 6.70376 21.311 6.70368C21.3111 6.70352 21.3111 6.70349 21.3111 6.7036C21.311 6.7038 21.3107 6.70452 21.3101 6.70576C21.309 6.70823 21.307 6.71275 21.3041 6.71924C21.2983 6.73223 21.2889 6.75309 21.2758 6.78125C21.2495 6.83757 21.2086 6.92295 21.1526 7.03267C21.0406 7.25227 20.869 7.56831 20.6354 7.9432C20.1669 8.69516 19.4563 9.67197 18.4867 10.582L19.5133 11.6757C20.6023 10.6535 21.3917 9.56587 21.9085 8.73646C22.1676 8.32068 22.36 7.9668 22.4889 7.71415C22.5533 7.58775 22.602 7.48643 22.6353 7.41507C22.6519 7.37939 22.6647 7.35118 22.6737 7.33104C22.6782 7.32097 22.6818 7.31292 22.6844 7.30696C22.6857 7.30398 22.6867 7.30153 22.6876 7.2996C22.688 7.29864 22.6883 7.29781 22.6886 7.29712C22.6888 7.29677 22.6889 7.29646 22.689 7.29618C22.6891 7.29604 22.6892 7.29585 22.6892 7.29578C22.6893 7.29561 22.6894 7.29544 22 7ZM18.4867 10.582C17.6277 11.3882 16.5739 12.1343 15.3125 12.6308L15.8619 14.0266C17.3355 13.4466 18.5466 12.583 19.5133 11.6757L18.4867 10.582ZM18.4697 11.6592L19.9697 13.1592L21.0303 12.0985L19.5303 10.5985L18.4697 11.6592ZM11.25 14V16.5H12.75V14H11.25ZM14.9586 13.7377L16.3714 15.909L17.6286 15.091L16.2158 12.9197L14.9586 13.7377ZM4.46967 10.5985L2.96967 12.0985L4.03033 13.1592L5.53033 11.6592L4.46967 10.5985Z" fill="black"/>
        </svg>
    `
}

const calendar = (attrs) => {
    attrs = {
        fill: 'none',
        ...attrs
    }
    return /*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path d="M3 9H21M9 15L11 17L15 13M7 3V5M17 3V5M6.2 21H17.8C18.9201 21 19.4802 21 19.908 20.782C20.3843 20.5903 20.5903 20.2843 20.782 19.908C21 19.4802 21 18.9201 21 17.8V8.2C21 7.07989 21 6.51984 20.782 6.09202C20.5903 5.71569 20.2843 5.40973 19.908 5.21799C19.4802 5 18.9201 5 17.8 5H6.2C5.0799 5 4.51984 5 4.09202 5.21799C3.71569 5.40973 3.40973 5.71569 3.21799 6.09202C3 6.51984 3 7.07989 3 8.2V17.8C3 18.9201 3 19.4802 3.21799 19.908C3.40973 20.2843 3.71569 20.5903 4.09202 20.782C4.51984 21 5.07989 21 6.2 21Z" stroke="silver" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
    `
}

const plus = (attrs) => {
    attrs = {
        fill: 'var(--accent-color)',
        ...attrs
    }
    return/*html*/`
        <svg 
        ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24" fill="none"
        >
            <path d="M4 12H20M12 4V20" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
    `
}

const close = (attrs) => {
    attrs = {
        fill: 'var(--accent-color)',
        ...attrs
    }
    return/*html*/`
        <svg 
        ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24" fill="none"
        >
            <path d="M20.7457 3.32851C20.3552 2.93798 19.722 2.93798 19.3315 3.32851L12.0371 10.6229L4.74275 3.32851C4.35223 2.93798 3.71906 2.93798 3.32854 3.32851C2.93801 3.71903 2.93801 4.3522 3.32854 4.74272L10.6229 12.0371L3.32856 19.3314C2.93803 19.722 2.93803 20.3551 3.32856 20.7457C3.71908 21.1362 4.35225 21.1362 4.74277 20.7457L12.0371 13.4513L19.3315 20.7457C19.722 21.1362 20.3552 21.1362 20.7457 20.7457C21.1362 20.3551 21.1362 19.722 20.7457 19.3315L13.4513 12.0371L20.7457 4.74272C21.1362 4.3522 21.1362 3.71903 20.7457 3.32851Z" />
        </svg>
    `
}

const send = (attrs) => {
    attrs = {
        stroke: 'black',
        ...attrs
    }
    return/*html*/`
        <svg 
        ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24" fill="none"
        >
            <path d="M20.7639 12H10.0556M3 8.00003H5.5M4 12H5.5M4.5 16H5.5M9.96153 12.4896L9.07002 15.4486C8.73252 16.5688 8.56376 17.1289 8.70734 17.4633C8.83199 17.7537 9.08656 17.9681 9.39391 18.0415C9.74792 18.1261 10.2711 17.8645 11.3175 17.3413L19.1378 13.4311C20.059 12.9705 20.5197 12.7402 20.6675 12.4285C20.7961 12.1573 20.7961 11.8427 20.6675 11.5715C20.5197 11.2598 20.059 11.0295 19.1378 10.5689L11.3068 6.65342C10.2633 6.13168 9.74156 5.87081 9.38789 5.95502C9.0808 6.02815 8.82627 6.24198 8.70128 6.53184C8.55731 6.86569 8.72427 7.42461 9.05819 8.54246L9.96261 11.5701C10.0137 11.7411 10.0392 11.8266 10.0493 11.9137C10.0583 11.991 10.0582 12.069 10.049 12.1463C10.0387 12.2334 10.013 12.3188 9.96153 12.4896Z" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"></path>
        </svg>
    `
}

const key = (attrs, extra={ color1: 'black', color2: 'white'}) => {
    attrs = {
        fill: 'var(--accent-color)',
        ...attrs
    }
    return/*html*/`
        <svg
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24" fill="none"
        >
            <path d="M18.9771 14.7904C21.6743 12.0932 21.6743 7.72013 18.9771 5.02291C16.2799 2.3257 11.9068 2.3257 9.20961 5.02291C7.41866 6.81385 6.8169 9.34366 7.40432 11.6311C7.49906 12 7.41492 12.399 7.14558 12.6684L3.43349 16.3804C3.11558 16.6984 2.95941 17.1435 3.00906 17.5904L3.24113 19.679C3.26587 19.9017 3.36566 20.1093 3.52408 20.2677L3.73229 20.4759C3.89072 20.6343 4.09834 20.7341 4.32101 20.7589L6.4096 20.9909C6.85645 21.0406 7.30164 20.8844 7.61956 20.5665L8.32958 19.8565L9.39026 18.7958L11.3319 16.8541C11.6013 16.5848 12 16.5009 12.3689 16.5957C14.6563 17.1831 17.1861 16.5813 18.9771 14.7904Z" fill="${extra.color1}"/>
            <path d="M15.4142 8.58579C14.6332 7.80474 13.3668 7.80474 12.5858 8.58579C11.8047 9.36683 11.8047 10.6332 12.5858 11.4142C13.3668 12.1953 14.6332 12.1953 15.4142 11.4142C16.1953 10.6332 16.1953 9.36683 15.4142 8.58579Z" fill="${extra.color2}" opacity="0.6"/>
            <path d="M6.58295 18.1294L8.3291 19.8565L9.38977 18.7958L7.63776 17.063C7.34326 16.7717 6.86839 16.7743 6.57711 17.0688C6.28584 17.3633 6.28845 17.8382 6.58295 18.1294Z" fill="${extra.color2}" opacity="0.6"/>
        </svg>
    `
}

const loading = (attrs) => {
    attrs = {
        fill: 'var(--accent-color)',
        class: '',
        ...attrs
    }
    attrs.class += ' loading-svg'
    return/*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 16 16"
        >
            <path d="M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8z" opacity=".2"></path>
            <path class="arc" fill="${attrs.fill}"  d="M7.25.75A.75.75 0 018 0a8 8 0 018 8 .75.75 0 01-1.5 0A6.5 6.5 0 008 1.5a.75.75 0 01-.75-.75z">
            </path>
        </svg>
    `
}

const photo = (attrs) => {
    attrs = {
        fill: 'var(--accent-color)',
        ...attrs
    }
    return/*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path d="M18 8C18 9.10457 17.1046 10 16 10C14.8954 10 14 9.10457 14 8C14 6.89543 14.8954 6 16 6C17.1046 6 18 6.89543 18 8Z"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M11.9426 1.25H12.0574C14.3658 1.24999 16.1748 1.24998 17.5863 1.43975C19.031 1.63399 20.1711 2.03933 21.0659 2.93414C21.9607 3.82895 22.366 4.96897 22.5603 6.41371C22.75 7.82519 22.75 9.63423 22.75 11.9426V12.0309C22.75 13.9397 22.75 15.5023 22.6463 16.7745C22.5422 18.0531 22.3287 19.1214 21.8509 20.0087C21.6401 20.4001 21.3812 20.7506 21.0659 21.0659C20.1711 21.9607 19.031 22.366 17.5863 22.5603C16.1748 22.75 14.3658 22.75 12.0574 22.75H11.9426C9.63423 22.75 7.82519 22.75 6.41371 22.5603C4.96897 22.366 3.82895 21.9607 2.93414 21.0659C2.14086 20.2726 1.7312 19.2852 1.51335 18.0604C1.29935 16.8573 1.2602 15.3603 1.25207 13.5015C1.25 13.0287 1.25 12.5286 1.25 12.001L1.25 11.9426C1.24999 9.63423 1.24998 7.82519 1.43975 6.41371C1.63399 4.96897 2.03933 3.82895 2.93414 2.93414C3.82895 2.03933 4.96897 1.63399 6.41371 1.43975C7.82519 1.24998 9.63423 1.24999 11.9426 1.25ZM6.61358 2.92637C5.33517 3.09825 4.56445 3.42514 3.9948 3.9948C3.42514 4.56445 3.09825 5.33517 2.92637 6.61358C2.75159 7.91356 2.75 9.62178 2.75 12C2.75 12.5287 2.75 13.0257 2.75205 13.4949C2.76025 15.369 2.80214 16.7406 2.99017 17.7978C3.17436 18.8333 3.48774 19.4981 3.9948 20.0052C4.56445 20.5749 5.33517 20.9018 6.61358 21.0736C7.91356 21.2484 9.62178 21.25 12 21.25C14.3782 21.25 16.0864 21.2484 17.3864 21.0736C18.6648 20.9018 19.4355 20.5749 20.0052 20.0052C20.2151 19.7953 20.3872 19.5631 20.5302 19.2976C20.8619 18.6816 21.0531 17.8578 21.1513 16.6527C21.2494 15.4482 21.25 13.9459 21.25 12C21.25 9.62178 21.2484 7.91356 21.0736 6.61358C20.9018 5.33517 20.5749 4.56445 20.0052 3.9948C19.4355 3.42514 18.6648 3.09825 17.3864 2.92637C16.0864 2.75159 14.3782 2.75 12 2.75C9.62178 2.75 7.91356 2.75159 6.61358 2.92637Z"/>
            <path opacity="0.4" d="M20.6069 19.1463L17.7765 16.599C16.737 15.6634 15.1889 15.5702 14.0446 16.3744L13.7464 16.5839C12.9513 17.1428 11.8695 17.0491 11.1822 16.3618L6.89252 12.0721C6.03631 11.2159 4.66289 11.1702 3.75162 11.9675L2.75049 12.8435C2.75077 13.0665 2.75128 13.2835 2.7522 13.4949C2.7604 15.369 2.80229 16.7406 2.99032 17.7978C3.17451 18.8333 3.48788 19.4981 3.99494 20.0052C4.5646 20.5749 5.33532 20.9018 6.61372 21.0736C7.9137 21.2484 9.62192 21.25 12.0001 21.25C14.3784 21.25 16.0866 21.2484 17.3866 21.0736C18.665 20.9018 19.4357 20.5749 20.0054 20.0052C20.2153 19.7953 20.3873 19.5631 20.5303 19.2976C20.5568 19.2485 20.5823 19.1981 20.6069 19.1463Z"/>
        </svg>
    `
}

const game_pad = (attrs) => {
    attrs = {
        fill: 'black',
        ...attrs
    }
    return/*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path fill-rule="evenodd" clip-rule="evenodd" d="M 12 4 V 4 H 14 C 17.7712 4 19.6569 4 20.8284 5.1716 C 22 6.3431 22 8.2288 22 12 C 22 15.7712 22 17.6569 20.8284 18.8284 C 19.6569 20 17.7712 20 14 20 H 10 C 6.2288 20 4.3431 20 3.1716 18.8284 C 2 17.6569 2 15.7712 2 12 C 2 8.2288 2 6.3431 3.1716 5.1716 C 4.3431 4 6.2288 4 10 4 H 12 Z M 8.75 10 C 8.75 9.5858 8.4142 9.25 8 9.25 C 7.5858 9.25 7.25 9.5858 7.25 10 V 11.05 C 7.25 11.1605 7.1605 11.25 7.05 11.25 H 6 C 5.5858 11.25 5.25 11.5858 5.25 12 C 5.25 12.4142 5.5858 12.75 6 12.75 H 7.05 C 7.1605 12.75 7.25 12.8395 7.25 12.95 V 14 C 7.25 14.4142 7.5858 14.75 8 14.75 C 8.4142 14.75 8.75 14.4142 8.75 14 V 12.95 C 8.75 12.8395 8.8395 12.75 8.95 12.75 H 10 C 10.4142 12.75 10.75 12.4142 10.75 12 C 10.75 11.5858 10.4142 11.25 10 11.25 H 8.95 C 8.8395 11.25 8.75 11.1605 8.75 11.05 V 10 Z M 15 11.5 C 15.5523 11.5 16 11.0523 16 10.5 C 16 9.9477 15.5523 9.5 15 9.5 C 14.4477 9.5 14 9.9477 14 10.5 C 14 11.0523 14.4477 11.5 15 11.5 Z M 18 13.5 C 18 14.0523 17.5523 14.5 17 14.5 C 16.4477 14.5 16 14.0523 16 13.5 C 16 12.9477 16.4477 12.5 17 12.5 C 17.5523 12.5 18 12.9477 18 13.5 Z"></path>
        </svg>
    `
}

const maximize = (attrs) => {
    attrs = {
        fill: 'black',
        ...attrs
    }
    return/*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path opacity="0.6" fill-rule="evenodd" clip-rule="evenodd" d="M8.60714 22C8.60714 22.4142 8.27136 22.75 7.85714 22.75H2C1.58579 22.75 1.25 22.4142 1.25 22V16.1429C1.25 15.7286 1.58579 15.3929 2 15.3929C2.41421 15.3929 2.75 15.7286 2.75 16.1429V20.1893L8.46967 14.4697C8.76256 14.1768 9.23744 14.1768 9.53033 14.4697C9.82322 14.7626 9.82322 15.2374 9.53033 15.5303L3.81066 21.25H7.85714C8.27136 21.25 8.60714 21.5858 8.60714 22Z"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M15.3929 2C15.3929 1.58579 15.7286 1.25 16.1429 1.25H22C22.4142 1.25 22.75 1.58579 22.75 2V7.85714C22.75 8.27136 22.4142 8.60714 22 8.60714C21.5858 8.60714 21.25 8.27136 21.25 7.85714V3.81066L15.5303 9.53033C15.2374 9.82322 14.7626 9.82322 14.4697 9.53033C14.1768 9.23744 14.1768 8.76256 14.4697 8.46967L20.1893 2.75H16.1429C15.7286 2.75 15.3929 2.41421 15.3929 2Z"/>
        </svg>
    `
}

const minimize = (attrs) => {
    attrs = {
        fill: 'black',
        ...attrs
    }
    return/*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
        <path opacity="0.6" fill-rule="evenodd" clip-rule="evenodd" d="M2.39286 15C2.39286 14.5858 2.72864 14.25 3.14286 14.25H9C9.41421 14.25 9.75 14.5858 9.75 15V20.8571C9.75 21.2714 9.41421 21.6071 9 21.6071C8.58579 21.6071 8.25 21.2714 8.25 20.8571V16.8107L2.53033 22.5303C2.23744 22.8232 1.76256 22.8232 1.46967 22.5303C1.17678 22.2374 1.17678 21.7626 1.46967 21.4697L7.18934 15.75H3.14286C2.72864 15.75 2.39286 15.4142 2.39286 15Z"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M21.6071 9C21.6071 9.41421 21.2714 9.75 20.8571 9.75H15C14.5858 9.75 14.25 9.41421 14.25 9V3.14286C14.25 2.72864 14.5858 2.39286 15 2.39286C15.4142 2.39286 15.75 2.72864 15.75 3.14286V7.18934L21.4697 1.46967C21.7626 1.17678 22.2374 1.17678 22.5303 1.46967C22.8232 1.76256 22.8232 2.23744 22.5303 2.53033L16.8107 8.25H20.8571C21.2714 8.25 21.6071 8.58579 21.6071 9Z"/>
        </svg>
    `
}

const menu = (attrs) => {
    attrs = {
        fill: 'black',
        stroke: 'silver',
        ...attrs
    }
    return/*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path d="M4 6H20M4 12H14M4 18H9" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
    `
}

const xmark = (attrs) => {
    attrs = {
        fill: 'none',
        stroke: 'silver',
        ...attrs
    }
    return/*html*/`
        <svg 
            ${ attrs_to_str(attrs) }
            viewBox="0 0 24 24"
        >
            <path d="M6 6L18 18M18 6L6 18" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
    `
}


const make = (svg_html) => {
    const div = document.createElement('div');
    div.innerHTML = svg_html;
    return div.firstElementChild
}

const SVGs = {
    make,
    pen,
    chevron_down,
    chevron_up,
    calendar,
    close,
    send,
    password_eye,
    plus,
    key,
    loading,
    photo,
    game_pad,
    maximize,
    minimize,
    menu,
    xmark
}

export default SVGs
